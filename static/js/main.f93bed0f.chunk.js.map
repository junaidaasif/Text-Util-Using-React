{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TexForm.js","components/About.js","components/NoPage.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","Fragment","className","concat","type","role","msg","Navbar","mode","react_router_dom","to","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","about","onClick","toggleMode","for","TexForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","style","color","heading","rows","value","backgroundColor","onChange","e","target","newTxt","toUpperCase","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","toLowerCase","length","About","myStyle","setmyStyle","_useState3","_useState4","btnTxt","setmyTxt","aria-labelledby","data-bs-parent","NoPage","defaultProps","App","setDarkMode","setAlert","message","setInterval","body","react_router","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.f93bed0f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Alert(props) {\r\n\r\n    return (\r\n        props.alert && <>\r\n            <div className={`alert alert-${props.alert.type}  fade show`} role=\"alert\">\r\n                {props.alert.type} : {props.alert.msg}\r\n\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n                            </li>\r\n\r\n\r\n                        </ul>\r\n\r\n                        <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                            <label className=\"form-check-label\" for=\"flexSwitchCheckDefault\">Enable Dark mode</label>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    );\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string.isRequired,\r\n\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"set title here\",\r\n    about: \"set about here\"\r\n\r\n};","import React, { useState } from 'react';\r\n\r\n\r\n\r\nexport default function TexForm(props) {\r\n\r\n    const handleUpClick = () => {\r\n        let newTxt = text.toUpperCase();\r\n        setText(newTxt)\r\n        props.showAlert(\"Convert to upper case\", \"success\")\r\n    }\r\n\r\n    const handleOnChange = (e) => {\r\n\r\n        setText(e.target.value)\r\n\r\n    }\r\n\r\n    const handleLowClick = () => {\r\n        let newTxt = text.toLowerCase();\r\n        setText(newTxt);\r\n        props.showAlert(\"Convert to lower case\", \"success\")\r\n    }\r\n\r\n    const handleCopyClick = () => {\r\n        let newTxt = document.getElementById('myBox');\r\n        newTxt.select();\r\n        navigator.clipboard.writeText(newTxt.value)\r\n        props.showAlert(\"Text Copied\", \"success\")\r\n    }\r\n\r\n    const handleRemoveSpaceClick = () => {\r\n\r\n        let newTxt = text.split(/[ ]+/);\r\n        setText(newTxt.join(\" \"))\r\n        props.showAlert(\"Extra spaces removed \", \"success\")\r\n    }\r\n\r\n    const [text, setText] = useState('Enter text here')  // text is variable and setText is a function through which we can change the walue of text\r\n    // text = \"sdkjfdskl;\"  wrong way \r\n    // setText(\"hello\")\r\n    return (\r\n        <>\r\n\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h1>{props.heading}</h1>\r\n                <textarea className=\"form-control\" id=\"myBox\" rows=\"7\" value={text} style={{ backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }} onChange={handleOnChange}></textarea>\r\n                <button className=\"btn-primary my-3 mx-3\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn-primary my-3 mx-3\" onClick={handleCopyClick}>Copy</button>\r\n                <button className=\"btn-primary my-3 mx-3\" onClick={handleRemoveSpaceClick}>Remove Extra Spaces</button>\r\n                <button className=\"btn-primary my-3\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n            </div>\r\n\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h1>Your text summary</h1>\r\n                <p> {text.split(\" \").length} words and {text.length} character</p>\r\n                <p>  {0.008 * text.split(\" \").length} min to read</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length > 0 ? text : \"Enter your text here\"}</p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle, setmyStyle] = useState({\r\n        color: 'white',\r\n        backgroundColor: 'black'\r\n    });\r\n\r\n    const [btnTxt, setmyTxt] = useState(\"Enable dark Mode\");\r\n\r\n\r\n    const toggleStyle = () => {\r\n        if (myStyle.color === 'white') {\r\n            setmyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setmyTxt(\"Enable dark Mode\")\r\n            \r\n        }\r\n        else {\r\n            setmyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black'\r\n            })\r\n            setmyTxt(\"Enable  Light mode\")\r\n        }\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container my-3\" style={myStyle}>\r\n                <h1>About Us</h1>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                            <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={myStyle}>\r\n                                Accordion Item #1\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={myStyle}>\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\r\n                                Accordion Item #2\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={myStyle}>\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\r\n                                Accordion Item #3\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={myStyle}>\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button className=\"btn btn-primary my-3\" onClick={toggleStyle} style={myStyle}>{btnTxt}</button>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function NoPage() {\r\n  return <div>\r\n      <h1>Sorry No page found   </h1>\r\n  </div>;\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TexForm';\nimport About from './components/About';\nimport NoPage from './components/NoPage';\nimport {\n  BrowserRouter as Router,\n  // Switch,\n  Route,\n  Routes,\n  // Link\n} from \"react-router-dom\";\n\n\n// let name = \"<h1>Junaid</h1>\";\n\nfunction App() {\n  const [mode, setDarkMode] = useState('light') //whether dark mode is enabled of not \n\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setInterval(() => {\n      setAlert(null)\n    }, 3000);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setDarkMode('dark');\n      document.body.style.backgroundColor = 'grey';\n      showAlert(\"Dark Mode is enabled\", \"success\");\n      document.title = 'text util - Dark Mode'\n\n    }\n    else {\n      setDarkMode('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode is enabled\", \"success\");\n\n      document.title = 'text util - Light mode'\n    }\n  }\n  return (\n\n    <Router>\n      <Navbar title=\"textUitls\" about='About' mode={mode} toggleMode={toggleMode} ></Navbar>\n\n      <Alert alert={alert}></Alert>\n\n      <Routes>\n        <Route path=\"/about\" element={<About />}>\n        </Route>\n        <Route path=\"/\" element={<TextForm heading=\"Enter the text analyze\" mode={mode} showAlert={showAlert}></TextForm>}>\n        </Route>\n        <Route path=\"*\" element={<NoPage />}>\n        </Route>\n\n      </Routes>\n\n\n\n\n\n    </Router>\n\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}